var http = require('http');
var https = require('https');
var parse = require('url').parse;
var logger = require('appLog');
var fs = require('fs');
var querystring = require('querystring');
var timeout = 30000;

exports.sendHttps = function(url, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    var options = {
        host: info.hostname,
        port: info.port || 443,
        path: path,
        method: 'GET'
    };
    var flagNum = Math.round(Math.random()*1000);
    logger.request.info("request url"+flagNum+" :["+url+"]");
    var req = https.request(options,function (res) {
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end',function () {
            var data = new Buffer(length), pos = 0
                , l = chunks.length;
            for (var i = 0; i < l; i++) {
                chunks[i].copy(data, pos);
                pos += chunks[i].length;
            }
            logger.request.info("url"+flagNum+" get response :["+data+']');
            callback(null, data);
        }).on('error', function (err) {
            logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
            callback(err, res);
        });
    }).on('error', function (err) {
        logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
        callback(err);
    });
    req.end();
    req.setTimeout(timeout, function () {
        req.abort();
        logger.request.warn("url"+flagNum+" request error:[request timeout]");
        callback(new Error("request timeout!"));
    });
}

exports.sendHttpsPost = function(url, data, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    var postdata = "";
    if(typeof(data) == "string" ){
        postdata = data;
    } else {
        postdata = JSON.stringify(data);
    }
    var options = {
        host: info.hostname,
        port: info.port || 443,
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': new Buffer(postdata).length
        }
    };

    console.dir(options);
    var req = https.request(options, function (res) {
        // res.setEncoding("utf-8");
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end', function () {
            var data = new Buffer(length), pos = 0, l = chunks.length;
            for(var i=0;i<l;i++){
                chunks[i].copy(data, pos);
                pos += chunks[i].length;
            }
            logger.request.info(url+" get response :["+data+']');
            callback(null, data);
        }).on('error',function(err){
            logger.request.warn(url+" 1 request error:["+err.message+"]");
            callback(err);
        });
    }).on('error',function(err){
        logger.request.warn(url+" request error:["+err.message+"]");
        callback(err);
    });
    req.write(postdata);
    req.end();
    req.setTimeout(timeout, function () {
        req.abort();
        logger.request.warn(url+" request error:[request timeout]");
        callback(new Error("request timeout!"));
    });
}

exports.sendPost = function (url, data, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    //var postdata = querystring.stringify(data);
    var postdata = "";
    if(typeof(data) == "string" ){
        postdata = data;
    } else {
        postdata = JSON.stringify(data);
    }
//    var postdata = JSON.stringify(data);
    postdata+='\r\n';
    var options = {
        host: info.hostname,
        port: info.port || 80,
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': new Buffer(postdata).length
        }
    };
    var flagNum = Math.round(Math.random()*1000);
    var req = http.request(options, function (res) {
       // res.setEncoding("utf-8");
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end', function () {
                var data = new Buffer(length), pos = 0, l = chunks.length;
                for(var i=0;i<l;i++){
                    chunks[i].copy(data, pos);
                    pos += chunks[i].length;
                }
                logger.request.info("url"+flagNum+" get response :["+data+']');
                callback(null, data);
            }).on('error',function(err){
                logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
                callback(err);
            });
    }).on('error',function(err){
            logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
            callback(err);
        });
    req.write(postdata);
    req.end();
    req.setTimeout(timeout, function () {
        req.abort();
        logger.request.warn("url"+flagNum+" request error:[request timeout]");
        callback(new Error("request timeout!"));
    });
}


exports.sendGet = function (url, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    var options = {
        host: info.hostname,
        port: info.port || 80,
        path: path,
        method: 'GET'
    };
    var flagNum = Math.round(Math.random()*1000);
    logger.request.info("request url"+flagNum+" :["+url+"]");
    var req = http.request(options,function (res) {
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end',function () {
                var data = new Buffer(length), pos = 0
                    , l = chunks.length;
                for (var i = 0; i < l; i++) {
                    chunks[i].copy(data, pos);
                    pos += chunks[i].length;
                }
                logger.request.info("url"+flagNum+" get response :["+data+']');
                callback(null, data);
            }).on('error', function (err) {
                logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
                callback(err, res);
            });
    }).on('error', function (err) {
            logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
            callback(err);
        });
    req.end();
    req.setTimeout(timeout, function () {
        req.abort();
        logger.request.warn("url"+flagNum+" request error:[request timeout]");
        callback(new Error("request timeout!"));
    });
}

exports.sendGet2 = function (url,timeoutSecs,callback) {
    var info = parse(url);
    timeoutSecs=timeoutSecs||timeout;
    var path = info.pathname + (info.search || '');
    var options = {
        host: info.hostname,
        port: info.port || 80,
        path: path,
        method: 'GET'
    };
    var flagNum = Math.round(Math.random()*1000);
    logger.request.info("request url"+flagNum+" :["+url+"]");
    var req = http.request(options,function (res) {
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end',function () {
                var data = new Buffer(length), pos = 0
                    , l = chunks.length;
                for (var i = 0; i < l; i++) {
                    chunks[i].copy(data, pos);
                    pos += chunks[i].length;
                }
                logger.request.info("url"+flagNum+" get response :["+data+']');
                callback(null, data);
            }).on('error', function (err) {
                logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
                callback(err, res);
            });
    }).on('error', function (err) {
            logger.request.warn("url"+flagNum+" request error:["+err.message+"]");
            callback(err);
        });
    req.end();
    req.setTimeout(timeoutSecs, function () {
        req.abort();
        logger.request.warn("url"+flagNum+" request error:[request timeout]");
        callback(new Error("request timeout!"));
    });
}

exports.sendFile = function (url, fileName, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    var boundaryKey = '----' + new Date().getTime();
    fs.stat(fileName, function (err, stat) {
        if (err) {
            callback(err);
            return;
        }
        var options = {
            host: info.hostname,
            port: info.port || 80,
            path: path,
            method: 'POST',
            headers: {
                'Content-Type': 'multipart/form-data',
                'Content-Length': stat.size
            }
        };
        var req = http.request(options,function (res) {
            //res.setEncoding("utf-8");
            var chunks = [], length = 0;
            res.on('data',function (chunk) {
                length += chunk.length;
                chunks.push(chunk);
            }).on('end',function () {
                    var data = new Buffer(length);
                    var pos = 0;
                    var l = chunks.length;
                    for (var i = 0; i < l; i++) {
                        chunks[i].copy(data, pos);
                        pos += chunks[i].length;
                    }
                    //logger.request.info("get response :[" + data + ']');
                    callback(null, data);
                    return;
                }).on('error', function (err) {
                    logger.request.warn("file pipe request error:[" + err.message + "]");
                    callback(err);
                });
            return;
        }).on('error', function (err) {
                logger.request.warn("http sendFile request error:[" + err.message + "]");
                callback(err);
            });

        var fileStream = fs.createReadStream(fileName, {bufferSize: 1024 * 1024});
        fileStream.pipe(req, {end: false});
        req.end();
//    fileStream.on('end', function () {
//        req.end('rn--' + boundaryKey + '--');
//    });
    });
}

exports.sendDBFile = function (url, fileData, callback) {
    var info = parse(url);
    var path = info.pathname + (info.search || '');
    var options = {
        host: info.hostname,
        port: info.port || 80,
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'multipart/form-data',
            'Content-Length': fileData.length
        }
    };
    console.info('sendDBFile: file data length: ' + fileData.length);
    var req = http.request(options,function (res) {
        //res.setEncoding("utf-8");
        var chunks = [], length = 0;
        res.on('data',function (chunk) {
            length += chunk.length;
            chunks.push(chunk);
        }).on('end',function () {
            var data = new Buffer(length);
            var pos = 0;
            var l = chunks.length;
            for (var i = 0; i < l; i++) {
                chunks[i].copy(data, pos);
                pos += chunks[i].length;
            }
            //logger.request.info("get response :[" + data + ']');
            callback(null, data);
        }).on('error', function (err) {
            logger.request.warn("file pipe request error:[" + err.message + "]");
            callback(err);
        });
    }).on('error', function (err) {
        logger.request.warn("http sendFile request error:[" + err.message + "]");
        callback(err);
    });
    req.write(fileData, function(err){
        req.end();
    });
}